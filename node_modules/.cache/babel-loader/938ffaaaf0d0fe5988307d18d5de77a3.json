{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ISHITA\\\\Downloads\\\\Atul\\\\Frontend\\\\src\\\\components\\\\MarkdownEditor\\\\MarkdownEditor.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport RichTextEditor from 'react-rte';\nimport './MarkdownEditor.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MarkdownEditor = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [value, setValue] = useState(RichTextEditor.createEmptyValue());\n  useImperativeHandle(ref, () => ({\n    cleanEditorState() {\n      setValue(RichTextEditor.createEmptyValue());\n    }\n\n  }));\n\n  const onChange = newValue => {\n    setValue(newValue);\n\n    if (props.onChange) {\n      // Send the changes up to the parent component as an HTML string.\n      // This is here to demonstrate using `.toString()` but in a real app it\n      // would be better to avoid generating a string on each change.\n      props.onChange(newValue.toString('html'));\n    }\n  }; // The toolbarConfig object allows you to specify custom buttons, reorder buttons and to add custom css classes.\n  // Supported inline styles: https://github.com/facebook/draft-js/blob/master/docs/Advanced-Topics-Inline-Styles.md\n  // Supported block types: https://github.com/facebook/draft-js/blob/master/docs/Advanced-Topics-Custom-Block-Render.md#draft-default-block-render-map\n\n\n  const toolbarConfig = {\n    // Optionally specify the groups to display (displayed in the order listed).\n    display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'LINK_BUTTONS' // 'BLOCK_TYPE_DROPDOWN',\n    // 'HISTORY_BUTTONS',\n    ],\n    INLINE_STYLE_BUTTONS: [{\n      label: 'Bold',\n      style: 'BOLD',\n      className: 'button-format'\n    }, {\n      label: 'Italic',\n      style: 'ITALIC',\n      className: 'button-format'\n    }, {\n      label: 'Underline',\n      style: 'UNDERLINE',\n      className: 'button-format'\n    } // {label: 'Monospace', style: 'CODE', className: 'button-format'},\n    ],\n    // BLOCK_TYPE_DROPDOWN: [\n    //   {label: 'Normal', style: 'unstyled'},\n    //   {label: 'Heading Large', style: 'header-one'},\n    //   {label: 'Heading Medium', style: 'header-two'},\n    //   {label: 'Heading Small', style: 'header-three'},\n    // ],\n    BLOCK_TYPE_BUTTONS: [{\n      label: 'UL',\n      style: 'unordered-list-item',\n      className: 'button-format'\n    }, {\n      label: 'OL',\n      style: 'ordered-list-item',\n      className: 'button-format'\n    }, {\n      label: 'Blockquote',\n      style: 'blockquote',\n      className: 'button-format'\n    }, {\n      label: 'Code Block',\n      style: 'code-block',\n      className: 'button-format code-block'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(RichTextEditor, {\n    className: \"rich-text-editor-root\",\n    toolbarClassName: \"rich-text-editor-toolbar\",\n    editorClassName: \"rich-text-editor-editor\",\n    toolbarConfig: toolbarConfig,\n    value: value,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}, \"EOnXzMwRjCnBQFnM6WZdUGhUC+k=\")), \"EOnXzMwRjCnBQFnM6WZdUGhUC+k=\");\n\n_c2 = MarkdownEditor;\nexport default MarkdownEditor;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MarkdownEditor$forwardRef\");\n$RefreshReg$(_c2, \"MarkdownEditor\");","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","RichTextEditor","MarkdownEditor","props","ref","value","setValue","createEmptyValue","cleanEditorState","onChange","newValue","toString","toolbarConfig","display","INLINE_STYLE_BUTTONS","label","style","className","BLOCK_TYPE_BUTTONS"],"sources":["C:/Users/ISHITA/Downloads/Atul/Frontend/src/components/MarkdownEditor/MarkdownEditor.component.jsx"],"sourcesContent":["import React, {useState, forwardRef, useImperativeHandle} from 'react';\nimport RichTextEditor from 'react-rte';\n\nimport './MarkdownEditor.styles.scss';\n\nconst MarkdownEditor = forwardRef((props, ref) => {\n  const [value, setValue] = useState(RichTextEditor.createEmptyValue());\n\n  useImperativeHandle(ref, () => ({\n    cleanEditorState() {\n      setValue(RichTextEditor.createEmptyValue());\n    },\n  }));\n\n  const onChange = (newValue) => {\n    setValue(newValue);\n    if (props.onChange) {\n      // Send the changes up to the parent component as an HTML string.\n      // This is here to demonstrate using `.toString()` but in a real app it\n      // would be better to avoid generating a string on each change.\n      props.onChange(newValue.toString('html'));\n    }\n  };\n\n  // The toolbarConfig object allows you to specify custom buttons, reorder buttons and to add custom css classes.\n  // Supported inline styles: https://github.com/facebook/draft-js/blob/master/docs/Advanced-Topics-Inline-Styles.md\n  // Supported block types: https://github.com/facebook/draft-js/blob/master/docs/Advanced-Topics-Custom-Block-Render.md#draft-default-block-render-map\n  const toolbarConfig = {\n    // Optionally specify the groups to display (displayed in the order listed).\n    display: [\n      'INLINE_STYLE_BUTTONS',\n      'BLOCK_TYPE_BUTTONS',\n      'LINK_BUTTONS',\n      // 'BLOCK_TYPE_DROPDOWN',\n      // 'HISTORY_BUTTONS',\n    ],\n    INLINE_STYLE_BUTTONS: [\n      {label: 'Bold', style: 'BOLD', className: 'button-format'},\n      {label: 'Italic', style: 'ITALIC', className: 'button-format'},\n      {label: 'Underline', style: 'UNDERLINE', className: 'button-format'},\n      // {label: 'Monospace', style: 'CODE', className: 'button-format'},\n    ],\n    // BLOCK_TYPE_DROPDOWN: [\n    //   {label: 'Normal', style: 'unstyled'},\n    //   {label: 'Heading Large', style: 'header-one'},\n    //   {label: 'Heading Medium', style: 'header-two'},\n    //   {label: 'Heading Small', style: 'header-three'},\n    // ],\n    BLOCK_TYPE_BUTTONS: [\n      {label: 'UL', style: 'unordered-list-item', className: 'button-format'},\n      {label: 'OL', style: 'ordered-list-item', className: 'button-format'},\n      {label: 'Blockquote', style: 'blockquote', className: 'button-format'},\n      {\n        label: 'Code Block',\n        style: 'code-block',\n        className: 'button-format code-block',\n      },\n    ],\n  };\n  return (\n    <RichTextEditor\n      className='rich-text-editor-root'\n      toolbarClassName='rich-text-editor-toolbar'\n      editorClassName='rich-text-editor-editor'\n      toolbarConfig={toolbarConfig}\n      value={value}\n      onChange={onChange}\n    />\n  );\n});\n\nexport default MarkdownEditor;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,mBAArC,QAA+D,OAA/D;AACA,OAAOC,cAAP,MAA2B,WAA3B;AAEA,OAAO,8BAAP;;;AAEA,MAAMC,cAAc,iCAAGH,UAAU,SAAC,CAACI,KAAD,EAAQC,GAAR,KAAgB;EAAA;;EAChD,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACG,cAAc,CAACM,gBAAf,EAAD,CAAlC;EAEAP,mBAAmB,CAACI,GAAD,EAAM,OAAO;IAC9BI,gBAAgB,GAAG;MACjBF,QAAQ,CAACL,cAAc,CAACM,gBAAf,EAAD,CAAR;IACD;;EAH6B,CAAP,CAAN,CAAnB;;EAMA,MAAME,QAAQ,GAAIC,QAAD,IAAc;IAC7BJ,QAAQ,CAACI,QAAD,CAAR;;IACA,IAAIP,KAAK,CAACM,QAAV,EAAoB;MAClB;MACA;MACA;MACAN,KAAK,CAACM,QAAN,CAAeC,QAAQ,CAACC,QAAT,CAAkB,MAAlB,CAAf;IACD;EACF,CARD,CATgD,CAmBhD;EACA;EACA;;;EACA,MAAMC,aAAa,GAAG;IACpB;IACAC,OAAO,EAAE,CACP,sBADO,EAEP,oBAFO,EAGP,cAHO,CAIP;IACA;IALO,CAFW;IASpBC,oBAAoB,EAAE,CACpB;MAACC,KAAK,EAAE,MAAR;MAAgBC,KAAK,EAAE,MAAvB;MAA+BC,SAAS,EAAE;IAA1C,CADoB,EAEpB;MAACF,KAAK,EAAE,QAAR;MAAkBC,KAAK,EAAE,QAAzB;MAAmCC,SAAS,EAAE;IAA9C,CAFoB,EAGpB;MAACF,KAAK,EAAE,WAAR;MAAqBC,KAAK,EAAE,WAA5B;MAAyCC,SAAS,EAAE;IAApD,CAHoB,CAIpB;IAJoB,CATF;IAepB;IACA;IACA;IACA;IACA;IACA;IACAC,kBAAkB,EAAE,CAClB;MAACH,KAAK,EAAE,IAAR;MAAcC,KAAK,EAAE,qBAArB;MAA4CC,SAAS,EAAE;IAAvD,CADkB,EAElB;MAACF,KAAK,EAAE,IAAR;MAAcC,KAAK,EAAE,mBAArB;MAA0CC,SAAS,EAAE;IAArD,CAFkB,EAGlB;MAACF,KAAK,EAAE,YAAR;MAAsBC,KAAK,EAAE,YAA7B;MAA2CC,SAAS,EAAE;IAAtD,CAHkB,EAIlB;MACEF,KAAK,EAAE,YADT;MAEEC,KAAK,EAAE,YAFT;MAGEC,SAAS,EAAE;IAHb,CAJkB;EArBA,CAAtB;EAgCA,oBACE,QAAC,cAAD;IACE,SAAS,EAAC,uBADZ;IAEE,gBAAgB,EAAC,0BAFnB;IAGE,eAAe,EAAC,yBAHlB;IAIE,aAAa,EAAEL,aAJjB;IAKE,KAAK,EAAEP,KALT;IAME,QAAQ,EAAEI;EANZ;IAAA;IAAA;IAAA;EAAA,QADF;AAUD,CAhEgC,kCAAb,iCAApB;;MAAMP,c;AAkEN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}