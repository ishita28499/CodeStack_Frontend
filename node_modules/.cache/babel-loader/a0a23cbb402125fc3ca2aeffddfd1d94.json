{"ast":null,"code":"import axios from 'axios';\nimport config from \"../../config\";\nimport setAuthToken from './auth.utils';\nimport { setAlert } from '../alert/alert.actions';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './auth.types'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(config.BASE_URL + `/api/auth`);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = _ref => {\n  let {\n    username,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config_headers = {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      username,\n      password\n    });\n\n    try {\n      const res = await axios.post(config.BASE_URL + `/api/users`, body, config_headers);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data.data\n      });\n      dispatch(setAlert(res.data.message, 'success'));\n      dispatch(loadUser());\n    } catch (err) {\n      dispatch(setAlert(err.response.data.message, 'danger'));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; // Login User\n\nexport const login = _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return async dispatch => {\n    const config_headers = {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      username,\n      password\n    });\n\n    try {\n      const res = await axios.post(config.BASE_URL + `/api/auth`, body, config_headers);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data.data\n      });\n      dispatch(setAlert(res.data.message, 'success'));\n      dispatch(loadUser());\n    } catch (err) {\n      dispatch(setAlert(err.response.data.message, 'danger'));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    }\n  };\n}; //LOGOUT\n\nexport const logout = () => dispatch => {\n  dispatch(setAlert('User has logged out', 'success'));\n  localStorage.removeItem('token');\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["axios","config","setAuthToken","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","localStorage","token","res","get","BASE_URL","type","payload","data","err","register","username","password","config_headers","headers","Accept","body","JSON","stringify","post","message","response","login","logout","removeItem"],"sources":["C:/Users/ISHITA/Downloads/Atul/Frontend/src/redux/auth/auth.actions.js"],"sourcesContent":["import axios from 'axios';\n\nimport config from \"../../config\";\nimport setAuthToken from './auth.utils';\nimport {setAlert} from '../alert/alert.actions';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n} from './auth.types';\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get(config.BASE_URL + `/api/auth`);\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Register User\nexport const register = ({username, password}) => async (dispatch) => {\n  const config_headers = {\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\",\n    },\n  };\n\n  const body = JSON.stringify({username, password});\n\n  try {\n    const res = await axios.post(config.BASE_URL + `/api/users`, body, config_headers);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data.data,\n    });\n\n    dispatch(setAlert(res.data.message, 'success'));\n\n    dispatch(loadUser());\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n// Login User\nexport const login = ({username, password}) => async (dispatch) => {\n  const config_headers = {\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: \"application/json\",\n    },\n  };\n\n  const body = JSON.stringify({username, password});\n\n  try {\n    const res = await axios.post(config.BASE_URL + `/api/auth`, body, config_headers);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data.data,\n    });\n\n    dispatch(setAlert(res.data.message, 'success'));\n\n    dispatch(loadUser());\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n//LOGOUT\nexport const logout = () => (dispatch) => {\n  dispatch(setAlert('User has logged out', 'success'));\n  localStorage.removeItem('token');\n\n  dispatch({type: LOGOUT});\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}